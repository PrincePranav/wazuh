---
test_name: DELETE /agents

marks:
  - usefixtures:
      - agents_test

stages:
  - name: Try remove not existing agents

    request:
      url: http://localhost:55000/agents
      method: DELETE
      params:
        list_agents_ids: 998,999

    response:
      status_code: 200
      body:
        affected_agents: []
        failed_ids:
          - error:
              code: 1701
              message: !anystr
              remediation: !anystr
            id: '998'
          - error:
              code: 1701
              message: !anystr
              remediation: !anystr
            id: '999'
        message: Some agents were not removed
        older_than: 7d
        total_affected_agents: 0
        total_failed_ids: 2
    
  - name: Try remove agent 000 (manager)

    request:
      url: http://localhost:55000/agents
      method: DELETE
      params:
        list_agents_ids: '000'

    response:
      status_code: 200
      body:
        affected_agents: []
        failed_ids:
          - error:
              code: 1703
              message: !anystr
              remediation: !anystr
            id: '000'
        message: Some agents were not removed
        older_than: 7d
        total_affected_agents: 0
        total_failed_ids: 1

  - name: Try remove agent by name

    request:
      url: http://localhost:55000/agents
      method: DELETE
      params:
        list_agents_ids: bad_id

    response:
      status_code: 400

  - name: Remove agents

    request:
      url: http://localhost:55000/agents
      method: DELETE
      params:
        list_agents_ids: 004,005
        older_than: '1s'
        purge: True

    response:
      status_code: 200
      body:
        affected_agents: ["004","005"]
        message: All selected agents were removed
        older_than: 1s
        total_affected_agents: 2

---
test_name: DELETE /agents/:agent_id

marks:
  - usefixtures:
      - agents_test

stages:
  - name: Try remove agent 000 (manager)

    request:
      url: http://localhost:55000/agents/000
      method: DELETE

    response: &error_delete_agent
      status_code: 200
      body:
        affected_agents: []
        failed_ids:
          - error:
              code: 1703
              message: !anystr
              remediation: !anystr
            id: '000'
        message: Some agents were not removed

  - name: Try remove not existing agent

    request:
      url: http://localhost:55000/agents/999
      method: DELETE

    response:
      <<: *error_delete_agent
      body:
        failed_ids:
          - id: '999'

  - name: Try remove agent by name

    request:
      url: http://localhost:55000/agents/bad_id
      method: DELETE

    response:
      status_code: 400

  - name: Remove an agent

    request:
      url: http://localhost:55000/agents/006
      method: DELETE
      params:
        purge: True

    response:
      status_code: 200
      body:
        affected_agents: ["006"]
        message: All selected agents were removed


---
test_name: DELETE /agents/:agent_id/group

marks:
  - usefixtures:
      - agents_test

stages:
  - name: Try remove group from agent 000 (manager)

    request:
      url: http://localhost:55000/agents/000/group
      method: DELETE

    response:
      status_code: 400

  - name: Try remove group not exist agent

    request:
      url: http://localhost:55000/agents/999/group
      method: DELETE

    response:
      status_code: 400

  - name: Try remove group bad agent ID

    request:
      url: http://localhost:55000/agents/bad_id/group
      method: DELETE

    response:
      status_code: 400

  - name: Remove groups

    request:
      url: http://localhost:55000/agents/001/group
      method: DELETE
      params:
        purge: True

    response:
      status_code: 200
      body:
        message: Group unset for agent '001'.

---
test_name: DELETE /agents/:agent_id/group/:group_id

marks:
  - usefixtures:
      - agents_test

stages:
  - name: Try remove group from agent 000 (manager)

    request:
      url: http://localhost:55000/agents/000/group/dmz
      method: DELETE

    response:
      status_code: 400

  - name: Try remove group not exist agent

    request:
      url: http://localhost:55000/agents/999/group/dmz
      method: DELETE

    response:
      status_code: 400

  - name: Try remove group bad agent ID

    request:
      url: http://localhost:55000/agents/bad_id/group/dmz
      method: DELETE

    response:
      status_code: 400

  - name: Remove not exist group

    request:
      url: http://localhost:55000/agents/001/group/dmz
      method: DELETE
      params:
        purge: True

    response:
      status_code: 400

  - name: Create new group

    request:
      url: http://localhost:55000/agents/groups/dmz
      method: PUT

    response:
      status_code: 200
      body:
        message: "Group 'dmz' created."

  - name: Put group to agent

    request:
      url: http://localhost:55000/agents/001/group/dmz
      method: PUT

    response:
      status_code: 200
      body:
        message: "Group 'dmz' added to agent '001'."

  - name: Remove group

    request:
      url: http://localhost:55000/agents/001/group/dmz
      method: DELETE

    response:
      status_code: 200
      body:
        message: "Group 'dmz' unset for agent '001'."

---
test_name: DELETE /agents/group/:group_id

marks:
  - usefixtures:
      - agents_test

stages:
  - name: Try remove not exist group

    request:
      url: http://localhost:55000/agents/group/dmztest
      method: DELETE
      params:
        list_agents: 001,002

    response:
      status_code: 400

  - name: Create new group

    request:
      url: http://localhost:55000/agents/groups/dmztest
      method: PUT

    response:
      status_code: 200
      body:
        message: "Group 'dmztest' created."

  - name: Put group to agent

    request:
      url: http://localhost:55000/agents/001/group/dmztest
      method: PUT

    response:
      status_code: 200
      body:
        message: "Group 'dmztest' added to agent '001'."

  - name: Try remove group agent 000

    request:
      url: http://localhost:55000/agents/group/dmztest
      method: DELETE
      params:
        list_agents: '000'

    response:
      status_code: 200
      body:
        affected_agents: []
        failed_ids:
          - '000'
        message: Some agents were not removed to group dmztest

  - name: Try remove group not exist agents

    request:
      url: http://localhost:55000/agents/group/dmztest
      method: DELETE
      params:
        list_agents: 998,999

    response:
      status_code: 200
      body:
        affected_agents: []
        failed_ids:
          - '998'
          - '999'
        message: Some agents were not removed to group dmztest

  - name: Remove group

    request:
      url: http://localhost:55000/agents/group/dmztest
      method: DELETE
      params:
        list_agents: '001'

    response:
      status_code: 200
      body:
        affected_agents: 
          - '001'
        message: All selected agents were removed to group dmztest

---
test_name: DELETE /agents/groups

marks:
  - usefixtures:
      - agents_test

stages:
  - name: Try remove not exist groups

    request:
      url: http://localhost:55000/agents/groups
      method: DELETE
      params:
        list_groups: dmztest1,dmztest2

    response:
      status_code: 200
      body:
        affected_agents: []
        failed_ids:
          - error:
              code: 1710
              message: !anystr
              remediation: !anystr
            id: dmztest1
          - error:
              code: 1710
              message: !anystr
              remediation: !anystr
            id: dmztest2
        ids: []
        message: Some groups were not removed

  - name: Create new group

    request:
      url: http://localhost:55000/agents/groups/dmztest1
      method: PUT

    response:
      status_code: 200
      body:
        message: "Group 'dmztest1' created."
    
  - name: Create other new group

    request:
      url: http://localhost:55000/agents/groups/dmztest2
      method: PUT

    response:
      status_code: 200
      body:
        message: "Group 'dmztest2' created."

  - name: Put group 1 to agent

    request:
      url: http://localhost:55000/agents/001/group/dmztest1
      method: PUT

    response:
      status_code: 200
      body:
        message: "Group 'dmztest1' added to agent '001'."

  - name: Put group 2 to agent

    request:
      url: http://localhost:55000/agents/002/group/dmztest2
      method: PUT

    response:
      status_code: 200
      body:
        message: "Group 'dmztest2' added to agent '002'."

  - name: Remove group

    request:
      url: http://localhost:55000/agents/groups
      method: DELETE
      params:
        list_groups: dmztest1,dmztest2

    response:
      status_code: 200
      body:
        affected_agents:
          - '001'
          - '002'
        ids:
          - dmztest1
          - dmztest2
        message: All selected groups were removed

---
test_name: DELETE /agents/groups/:group_id

marks:
  - usefixtures:
      - agents_test

stages:
  - name: Try remove not exist groups

    request:
      url: http://localhost:55000/agents/groups/dmztest1
      method: DELETE

    response:
      status_code: 200
      body:
        affected_agents: []
        failed_ids:
          - error:
              code: 1710
              message: !anystr
              remediation: !anystr
            id: dmztest1
        ids: []
        message: Some groups were not removed

  - name: Create new group

    request:
      url: http://localhost:55000/agents/groups/dmztest1
      method: PUT

    response:
      status_code: 200
      body:
        message: "Group 'dmztest1' created."
    
  - name: Create other new group

    request:
      url: http://localhost:55000/agents/groups/dmztest2
      method: PUT

    response:
      status_code: 200
      body:
        message: "Group 'dmztest2' created."

  - name: Put group to agent

    request:
      url: http://localhost:55000/agents/001/group/dmztest1
      method: PUT

    response:
      status_code: 200
      body:
        message: "Group 'dmztest1' added to agent '001'."

  - name: Remove group

    request:
      url: http://localhost:55000/agents/groups/dmztest1
      method: DELETE

    response:
      status_code: 200
      body:
        affected_agents:
          - '001'
        ids:
          - dmztest1
        message: All selected groups were removed

  - name: Remove other group

    request:
      url: http://localhost:55000/agents/groups/dmztest2
      method: DELETE

    response:
      status_code: 200
      body:
        affected_agents: []
        ids:
          - dmztest2
        message: All selected groups were removed

---
test_name: GET /agents

marks:
  - usefixtures:
      - agents_test

stages:
  - name: Basic response agents

    request: &get_agents
      url: http://localhost:55000/agents
      method: GET

    response:
      status_code: 200
      body:
        items: !anything
        totalItems: !anyint

  - name: Pagination

    request:
      <<: *get_agents
      params: 
        offset: 0
        limit: 1

    response:
      status_code: 200
      save:
        body:
          expected_os_platform: items.0.os.platform
          expected_os_version: items.0.os.version
          expected_os_name: items.0.os.name
          expected_manager_host: items.0.manager
          expected_node_name: items.0.node_name
          expected_name: items.0.name
          expected_ip: items.0.ip
      body:
        items:
          - status: Active
            id: '000'
        totalItems: !anyint

  - name: Try show agents with limit 0

    request:
      <<: *get_agents
      params:
        limit: 0

    response:
      status_code: 400

  - name: Sort

    request:
      <<: *get_agents
      params:
        sort: -id

    response:
      status_code: 200
      body:
        items: !anything
        totalItems: !anyint

  - name: Try show agents with wrong sort

    request:
      <<: *get_agents
      params:
        sort: -wrong_sort

    response:
      status_code: 400

  - name: Search

    request:
      <<: *get_agents
      params:
        search: '000'

    response:
      status_code: 200
      body:
        items: !anything
          id: '000'
        totalItems: !anyint

  - name: Try show agents with wrong search

    request:
      <<: *get_agents
      params:
        search: wrong_search

    response:
      status_code: 200
      body:
        items: !anything
        totalItems: 0

  - name: Filter select one field

    request:
      <<: *get_agents
      params: 
        select: 'os.platform'
    
    response:
      status_code: 200
      body:
        items: !anything
        totalItems: !anyint
  
  - name: Filter select multiple fields

    request:
      <<: *get_agents
      params: 
        select: 'dateAdd,mergedSum'
    
    response:
      status_code: 200
      body:
        items: !anything
        totalItems: !anyint

  - name: Try show agents with not allowed selector

    request:
      <<: *get_agents
      params:
        select: param_test

    response:
      status_code: 400

  - name: Try show agents with not allowed selector (invalid character)

    request:
      <<: *get_agents
      params:
        select: param_ñ_test

    response:
      status_code: 400

  - name: Filter by agent version

    request:
      <<: *get_agents
      params: 
        version: 'Wazuhv3.9.0'
    
    response:
      status_code: 200
      body:
        items: !anything
        totalItems: !anyint

  - name: Try show agents with not existed version

    request:
      <<: *get_agents
      params: 
        version: 'TestVersion'
    
    response:
      status_code: 200
      body:
        items: !anything
        totalItems: 0

  - name: Filter by agent OS Platform

    request:
      <<: *get_agents
      params: 
        os_platform: "{expected_os_platform:s}"
    
    response:
      status_code: 200
      body:
        items: !anything
        totalItems: !anyint
  
  - name: Try show agents with not existed OS Platform

    request:
      <<: *get_agents
      params: 
        os_platform: test_platform
    
    response:
      status_code: 200
      body:
        items: !anything
        totalItems: 0

  - name: Filter by agent OS Version

    request:
      <<: *get_agents
      params: 
        os_version: "{expected_os_version:s}"
    
    response:
      status_code: 200
      body:
        items: !anything
        totalItems: !anyint

  - name: Try show agents with not existed OS Version

    request:
      <<: *get_agents
      params: 
        os_version: test_version
    
    response:
      status_code: 200
      body:
        items: !anything
        totalItems: 0

  - name: Filter by agent OS Name

    request:
      <<: *get_agents
      params: 
        os_name: "{expected_os_name:s}"
    
    response:
      status_code: 200
      body:
        items: !anything
        totalItems: !anyint

  - name: Try show agents with not existed OS Name

    request:
      <<: *get_agents
      params: 
        os_name: test_name
    
    response:
      status_code: 200
      body:
        items: !anything
        totalItems: 0

  - name: Filter by agent Node Name

    request:
      <<: *get_agents
      params: 
        os_platform: "{expected_node_name:s}"
    
    response:
      status_code: 200
      body:
        items: !anything
        totalItems: !anyint
  
  - name: Try show agents with not existed Node Name

    request:
      <<: *get_agents
      params: 
        os_platform: test_node_name
    
    response:
      status_code: 200
      body:
        items: !anything
        totalItems: 0

  - name: Filter by agent name

    request:
      <<: *get_agents
      params: 
        os_version: "{expected_name:s}"
    
    response:
      status_code: 200
      body:
        items: !anything
        totalItems: !anyint

  - name: Try show agents with not existed agent name

    request:
      <<: *get_agents
      params: 
        os_version: test_name
    
    response:
      status_code: 200
      body:
        items: !anything
        totalItems: 0

  - name: Filter by agent IP

    request:
      <<: *get_agents
      params: 
        os_name: "{expected_ip:s}"
    
    response:
      status_code: 200
      body:
        items: !anything
        totalItems: !anyint

  - name: Try show agents with not existed OS Name

    request:
      <<: *get_agents
      params: 
        os_name: test_ip
    
    response:
      status_code: 200
      body:
        items: !anything
        totalItems: 0

  - name: Filter by agent ManagerHost

    request:
      <<: *get_agents
      params: 
        manager: expected_manager_host
    
    response:
      status_code: 200
      body:
        items: !anything
        totalItems: !anyint
  
  - name: Try show agents with not existed ManagerHost

    request:
      <<: *get_agents
      params: 
        manager: test_manager
    
    response:
      status_code: 200
      body:
        items: !anything
        totalItems: 0

  - name: Filter by agent status

    request:
      <<: *get_agents
      params: 
        agent_status: active
    
    response:
      status_code: 200
      body:
        items: !anything
        totalItems: !anyint
  
  - name: Filter by agent status 2

    request:
      <<: *get_agents
      params: 
        agent_status: active,neverconnected
    
    response:
      status_code: 200
      body:
        items: !anything
        totalItems: !anyint

  - name: Try show agents with not existed status

    request:
      <<: *get_agents
      params: 
        agent_status: test_status
    
    response:
      status_code: 400

  - name: Filter agents by group

    request:
      <<: *get_agents
      params: 
        group: default
    
    response:
      status_code: 200
      body:
        items: !anything
        totalItems: !anyint
  
  - name: Try show agents with not existed group

    request:
      <<: *get_agents
      params: 
        group: test_group
    
    response:
      status_code: 200
      body:
        items: !anything
        totalItems: 0

  - name: Filter agents by query

    request:
      <<: *get_agents
      params: 
        q: group=default;lastKeepAlive<1d
    
    response:
      status_code: 200
      body:
        items: !anything
        totalItems: !anyint

  - name: Try show agents with bad query

    request:
      <<: *get_agents
      params: 
        q: group=default;lastKeepAe<1d
    
    response:
      status_code: 400

  - name: Filter agents by older param

    request:
      <<: *get_agents
      params: 
        older_than: 10s
    
    response:
      status_code: 200
      body:
        items: !anything
        totalItems: !anyint

  - name: Try show agents with bad older_than

    request:
      <<: *get_agents
      params: 
        older_than: bad_time
    
    response:
      status_code: 400
